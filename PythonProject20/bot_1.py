import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.enums import ParseMode
from datetime import datetime, time, timedelta
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
import logging

API_TOKEN = "7221891232:AAEG9L2JjVtpaqDfqiO2lHNwenNlQmxSNzY"

logging.basicConfig(level=logging.INFO)

bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# --- –î–∞–Ω–Ω—ã–µ ---
user_ids = set()  # –¢—É—Ç –±—É–¥—É—Ç –≤—Å–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
practice_schedule = [  # (–¥–µ–Ω—å, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞)
    ("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", time(13, 0)),
    ("–í—Ç–æ—Ä–Ω–∏–∫", time(14, 32)),
    ("–°—Ä–µ–¥–∞", time(15, 30)),
]
# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
schedule = {
    "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": ["9:00 - –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "13:00 - –ü—Ä–∞–∫—Ç–∏–∫–∞"],
    "–í—Ç–æ—Ä–Ω–∏–∫": ["9:00 - –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "14:05 - –ü—Ä–∞–∫—Ç–∏–∫–∞"],
    "–°—Ä–µ–¥–∞": ["12:00 - –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "15:00 - –ü—Ä–∞–∫—Ç–∏–∫–∞"]
}

practice_slots = {}  # key: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫_13:00", value: {"open_time": datetime, 1: user_id, ...}
MAX_SLOTS = 33
RECORDING_DURATION = timedelta(hours=1)

# --- –ö–Ω–æ–ø–∫–∏ ---
def get_confirm_keyboard(key):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_yes_{key}"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"confirm_no_{key}")
        ]
    ])

def get_slot_keyboard(key, user_id):
    if key not in practice_slots:
        return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ó–∞–ø–∏—Å—å –∑–∞–∫—Ä—ã—Ç–∞", callback_data="closed")]])
    booked = practice_slots.get(key, {})
    keyboard = []
    row = []
    for i in range(1, MAX_SLOTS + 1):
        if i in booked and isinstance(booked[i], int):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            text = f"üîí{i}" if booked[i] != user_id else f"‚úÖ{i}"
            callback_data = "busy"
        else:
            text = str(i)
            callback_data = f"slot_{key}_{i}"
        row.append(InlineKeyboardButton(text=text, callback_data=callback_data))
        if len(row) == 6:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@dp.message(Command(commands=["start"]))
async def register_user(message: types.Message):
    user_ids.add(message.from_user.id)
    await message.answer("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–¥–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–ø–∏—Å–∏.")

@dp.callback_query(lambda c: c.data == "busy")
async def handle_busy(callback: CallbackQuery):
    await callback.answer("–≠—Ç–æ –º–µ—Å—Ç–æ —É–∂–µ –∑–∞–Ω—è—Ç–æ.", show_alert=True)

@dp.callback_query(lambda c: c.data == "closed")
async def handle_closed(callback: CallbackQuery):
    await callback.answer("–ó–∞–ø–∏—Å—å –Ω–∞ —ç—Ç—É –ø—Ä–∞–∫—Ç–∏–∫—É —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.", show_alert=True)

@dp.callback_query(lambda c: c.data.startswith("confirm_yes_"))
async def handle_confirm_yes(callback: CallbackQuery):
    key = callback.data.replace("confirm_yes_", "")
    if key in practice_slots:
        await callback.message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫—É ({key.replace('_', ' ')}):",
            reply_markup=get_slot_keyboard(key, callback.from_user.id)
        )
        await callback.answer()
    else:
        await callback.answer("–ó–∞–ø–∏—Å—å –Ω–∞ —ç—Ç—É –ø—Ä–∞–∫—Ç–∏–∫—É —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.")

@dp.callback_query(lambda c: c.data.startswith("confirm_no_"))
async def handle_confirm_no(callback: CallbackQuery):
    await callback.message.edit_text("‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–ø–∏—Å–∏.")
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("slot_"))
async def handle_slot_selection(callback: CallbackQuery):
    _, day, time_str, slot_str = callback.data.split("_")
    key = f"{day}_{time_str}"
    slot_num = int(slot_str)
    user_id = callback.from_user.id

    if key not in practice_slots:
        await callback.answer("–ó–∞–ø–∏—Å—å –Ω–∞ —ç—Ç—É –ø—Ä–∞–∫—Ç–∏–∫—É —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.", show_alert=True)
        return

    booked = practice_slots.get(key)

    if slot_num in booked and isinstance(booked[slot_num], int):
        await callback.answer("–≠—Ç–æ –º–µ—Å—Ç–æ —É–∂–µ –∑–∞–Ω—è—Ç–æ.", show_alert=True)
        return

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for s, uid in list(booked.items()):
        if isinstance(uid, int) and uid == user_id:
            del booked[s]

    booked[slot_num] = user_id
    await callback.message.edit_reply_markup(reply_markup=get_slot_keyboard(key, user_id))
    await callback.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–µ—Å—Ç–æ #{slot_num}")

# --- –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä ---
async def schedule_checker():
    sent_notifications = set()
    weekdays = {
        "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
        "Wednesday": "–°—Ä–µ–¥–∞",
        "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
        "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
        "Saturday": "–°—É–±–±–æ—Ç–∞",
        "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }

    while True:
        now = datetime.now(tz=None)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        today = weekdays[now.strftime("%A")]
        current_time = now.strftime("%H:%M")

        keys_to_remove = []
        for key, data in practice_slots.items():
            if "open_time" in data and (now - data["open_time"]) > RECORDING_DURATION:
                keys_to_remove.append(key)
                booked_users = {slot: user_id for slot, user_id in data.items() if isinstance(user_id, int)}
                for user_id in booked_users.values():
                    try:
                        day, time_str = key.split("_")
                        await bot.send_message(user_id, f"üì¢ –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫—É {day} –≤ {time_str} –∑–∞–∫—Ä—ã—Ç–∞.")
                    except Exception as e:
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        for key in keys_to_remove:
            del practice_slots[key]
            if key in sent_notifications:
                sent_notifications.remove(key)

        for day, t in practice_schedule:
            time_str = t.strftime("%H:%M")
            key = f"{day}_{time_str}"

            if today == day and current_time == time_str and key not in sent_notifications:
                sent_notifications.add(key)
                practice_slots[key] = {"open_time": now}

                for uid in user_ids:
                    try:
                        await bot.send_message(
                            uid,
                            f"üì¢ –û—Ç–∫—Ä—ã—Ç–∞ –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫—É {day} –≤ {time_str}.\n–ó–∞–ø–∏—Å—å –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞.",
                            reply_markup=get_confirm_keyboard(key)
                        )
                    except Exception as e:
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
        await asyncio.sleep(60)

# --- –°—Ç–∞—Ä—Ç ---
async def main():
    asyncio.create_task(schedule_checker())
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())